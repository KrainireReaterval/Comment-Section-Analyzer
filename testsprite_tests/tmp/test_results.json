[
  {
    "projectId": "564174b3-f868-4a9a-bebd-7a4038fc8838",
    "testId": "12ccf17d-8baf-4eb8-ae77-6f52891403fd",
    "userId": "e4782438-2081-7080-7b8d-4df4bb14d38e",
    "title": "TC001-post api analyze video comments",
    "description": "Test the POST /api/analyze endpoint to ensure it accepts a valid YouTube video URL and max comments parameter, triggers comment scraping, AI sentiment analysis, and returns a successful analysis response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5001\"\nTIMEOUT = 30\n\ndef test_post_api_analyze_video_comments():\n    url = f\"{BASE_URL}/api/analyze\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"video_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n        \"max_comments\": 500\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    # Validate response status code\n    assert response.status_code == 200, f\"Expected status code 200 but got {response.status_code}\"\n\n    # Validate response JSON structure and content\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Expected keys in a successful analysis response could include status, analysis_id, results, etc.\n    # Since the PRD does not specify exact response schema, we validate common expected fields.\n    assert isinstance(data, dict), \"Response JSON is not an object\"\n\n    # Check for success indication\n    # Typical response might have a 'status' field indicating success or a flag\n    assert \"status\" in data, \"Response JSON missing 'status' field\"\n    assert data[\"status\"].lower() == \"success\", f\"Analysis status is not success: {data.get('status')}\"\n\n    # Check for presence of results or analysis data\n    assert \"analysis_id\" in data or \"results\" in data, \"Response missing analysis results or analysis_id\"\n\n    # Optionally check that results contain expected elements if present\n    if \"results\" in data:\n        results = data[\"results\"]\n        assert isinstance(results, dict), \"'results' should be a dictionary\"\n        # Check example fields likely present in analysis results\n        for key in [\"sentiment_summary\", \"topics\", \"comment_count\"]:\n            assert key in results, f\"'results' missing expected key: {key}\"\n\n    # Check max_comments is respected or reported (if applicable)\n    if \"requested_max_comments\" in data:\n        assert data[\"requested_max_comments\"] == payload[\"max_comments\"], \"Max comments value mismatch in response\"\n\ntest_post_api_analyze_video_comments()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 18, in test_post_api_analyze_video_comments\n  File \"/var/task/requests/models.py\", line 1024, in raise_for_status\n    raise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: NOT FOUND for url: http://localhost:5001/api/analyze\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 55, in <module>\n  File \"<string>\", line 20, in test_post_api_analyze_video_comments\nAssertionError: Request failed: 404 Client Error: NOT FOUND for url: http://localhost:5001/api/analyze\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-19T00:22:59.726Z",
    "modified": "2025-10-19T00:23:16.705Z"
  },
  {
    "projectId": "564174b3-f868-4a9a-bebd-7a4038fc8838",
    "testId": "3ca58faa-e63b-47d7-b88a-bfb629a47389",
    "userId": "e4782438-2081-7080-7b8d-4df4bb14d38e",
    "title": "TC002-get api retrieve analysis report",
    "description": "Test the GET /api/report endpoint to verify it returns the correct analysis report data including video info, sentiment overview, topics, and sample comments for a given video ID.",
    "code": "import requests\nimport re\n\nBASE_URL = \"http://localhost:5001\"\nTIMEOUT = 30\n\ndef test_get_api_retrieve_analysis_report():\n    # Helper function to extract video ID from a YouTube URL\n    def extract_video_id(youtube_url):\n        # Supports formats:\n        # https://www.youtube.com/watch?v=VIDEO_ID\n        # https://youtu.be/VIDEO_ID\n        patterns = [\n            r\"youtube\\.com/watch\\?v=([^&]+)\",\n            r\"youtu\\.be/([^?&]+)\"\n        ]\n        for pattern in patterns:\n            match = re.search(pattern, youtube_url)\n            if match:\n                return match.group(1)\n        return None\n\n    # Step 1: Create a new analysis by POST /api/videos/analyze to get a valid video ID and ensure a report exists\n    analyze_url = f\"{BASE_URL}/api/videos/analyze\"\n    youtube_url = \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\"  # Example video\n    max_comments = 500\n\n    analyze_payload = {\n        \"video_url\": youtube_url,\n        \"max_comments\": max_comments\n    }\n    headers = {\"Content-Type\": \"application/json\"}\n\n    created_analysis_id = None\n    try:\n        analyze_response = requests.post(analyze_url, json=analyze_payload, headers=headers, timeout=TIMEOUT)\n        assert analyze_response.status_code == 200, f\"Expected status 200 from /api/videos/analyze, got {analyze_response.status_code}\"\n        analyze_data = analyze_response.json()\n        # Video ID might be returned in response or we extract from URL\n        if \"video_id\" in analyze_data:\n            video_id = analyze_data[\"video_id\"]\n        else:\n            video_id = extract_video_id(youtube_url)\n        assert video_id, \"Failed to get video ID from analyze response or URL\"\n\n        created_analysis_id = video_id\n\n        # Step 2: GET /api/videos/report?video_id=VIDEO_ID\n        report_url = f\"{BASE_URL}/api/videos/report\"\n        params = {\"video_id\": video_id}\n\n        report_response = requests.get(report_url, params=params, timeout=TIMEOUT)\n        assert report_response.status_code == 200, f\"Expected status 200 from /api/videos/report, got {report_response.status_code}\"\n        report_data = report_response.json()\n\n        # Validate report content keys\n        # Expected keys: video info, sentiment overview, topics, sample comments\n        # We assume keys: 'video_info', 'sentiment_overview', 'topics', 'sample_comments'\n        expected_keys = [\"video_info\", \"sentiment_overview\", \"topics\", \"sample_comments\"]\n        for key in expected_keys:\n            assert key in report_data, f\"Missing '{key}' in report response\"\n\n        # Validate video_info has essential fields\n        video_info = report_data[\"video_info\"]\n        for field in [\"title\", \"channel_title\", \"published_at\", \"video_url\"]:\n            assert field in video_info, f\"Missing '{field}' in video_info\"\n\n        # Validate sentiment_overview contains sentiment distribution counts or percentages with expected sentiments\n        sentiment_overview = report_data[\"sentiment_overview\"]\n        for sentiment in [\"positive\", \"negative\", \"neutral\"]:\n            assert sentiment in sentiment_overview, f\"Missing sentiment '{sentiment}' in sentiment_overview\"\n\n        # Validate topics is a non-empty list or dict\n        topics = report_data[\"topics\"]\n        assert topics is not None, \"Topics section is None\"\n        assert (isinstance(topics, list) or isinstance(topics, dict)), \"Topics should be a list or dict\"\n        assert len(topics) > 0, \"Topics is empty\"\n\n        # Validate sample_comments is a list of dicts with comment data\n        sample_comments = report_data[\"sample_comments\"]\n        assert isinstance(sample_comments, list), \"sample_comments should be a list\"\n        assert len(sample_comments) > 0, \"sample_comments is empty\"\n        # Each comment should have text and sentiment at least\n        for comment in sample_comments:\n            assert isinstance(comment, dict), \"Each comment should be a dict\"\n            assert \"text\" in comment and isinstance(comment[\"text\"], str), \"Comment missing 'text' or not string\"\n            assert \"sentiment\" in comment, \"Comment missing 'sentiment'\"\n\n    finally:\n        # Cleanup: If there is an API to delete the analysis, call it here.\n        # No delete API documented in PRD, so skipping cleanup.\n        pass\n\ntest_get_api_retrieve_analysis_report()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 94, in <module>\n  File \"<string>\", line 37, in test_get_api_retrieve_analysis_report\nAssertionError: Expected status 200 from /api/videos/analyze, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-19T00:22:59.733Z",
    "modified": "2025-10-19T00:23:40.424Z"
  },
  {
    "projectId": "564174b3-f868-4a9a-bebd-7a4038fc8838",
    "testId": "a9c10ce8-4d9f-40be-a03a-26b130521e70",
    "userId": "e4782438-2081-7080-7b8d-4df4bb14d38e",
    "title": "TC003-get api list all analyses",
    "description": "Test the GET /api/analyses endpoint to ensure it returns a list of all previous video analyses stored in the database with relevant metadata.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5001\"\nTIMEOUT = 30\nHEADERS = {\n    \"Accept\": \"application/json\"\n}\n\ndef test_get_api_list_all_analyses():\n    url = f\"{BASE_URL}/api/analyses\"\n    try:\n        response = requests.get(url, headers=HEADERS, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON.\"\n\n    # The response should be a list (or an object containing a list) of analyses\n    assert isinstance(data, (list, dict)), \"Response JSON should be a list or dict.\"\n    # If dict, try to locate analyses list inside, else check the list directly\n    analyses = data.get(\"analyses\") if isinstance(data, dict) else data\n\n    assert isinstance(analyses, list), \"Analyses should be a list.\"\n\n    # For each analysis, check relevant metadata presence\n    for analysis in analyses:\n        assert isinstance(analysis, dict), \"Each analysis entry should be a dict.\"\n        # Check for keys typical of metadata, e.g. id, video_id, created_at (based on common patterns)\n        assert \"id\" in analysis, \"Analysis item missing 'id'.\"\n        assert \"video_id\" in analysis or \"videoUrl\" in analysis or \"video_id\" in analysis, \"Analysis item missing video id.\"\n        assert \"created_at\" in analysis or \"timestamp\" in analysis or \"date\" in analysis, \"Analysis item missing creation date.\"\n\ntest_get_api_list_all_analyses()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 36, in <module>\n  File \"<string>\", line 15, in test_get_api_list_all_analyses\nAssertionError: Expected status code 200, got 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-19T00:22:59.739Z",
    "modified": "2025-10-19T00:23:16.140Z"
  },
  {
    "projectId": "564174b3-f868-4a9a-bebd-7a4038fc8838",
    "testId": "c0392900-7a5c-44e4-83a8-f9a296a157b6",
    "userId": "e4782438-2081-7080-7b8d-4df4bb14d38e",
    "title": "TC004-get api health check",
    "description": "Test the GET /api/health endpoint to confirm the backend service is running and returns a healthy status response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5001\"\nTIMEOUT = 30\n\ndef test_get_api_health_check():\n    url = f\"{BASE_URL}/api/health\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    assert response.status_code == 200, f\"Expected status code 200, got {response.status_code}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Assuming the health endpoint returns a JSON with a status or health key indicating service status\n    # We'll check for either 'status' or 'health' keys with expected values like 'healthy' or 'ok'\n    status = None\n    for key in ('status', 'health', 'message'):\n        if key in data:\n            status = data[key]\n            break\n\n    assert status is not None, \"Health check response JSON does not contain 'status', 'health', or 'message' key\"\n\n    assert isinstance(status, str), f\"Status value should be string, got {type(status)}\"\n    assert status.lower() in (\"healthy\", \"ok\", \"running\", \"up\"), f\"Unexpected health status: {status}\"\n\ntest_get_api_health_check()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-19T00:22:59.746Z",
    "modified": "2025-10-19T00:23:14.936Z"
  }
]
